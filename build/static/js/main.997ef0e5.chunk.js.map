{"version":3,"sources":["utils/shortestPath.js","Component/Home.js","App.js","reportWebVitals.js","index.js"],"names":["shortestDistanceNode","distances","visited","shortest","node","includes","findShortestPath","graph","startNode","endNode","Object","assign","parents","child","distance","children","String","newdistance","push","shortestPath","parent","reverse","path","Home","restaurants","houses","useState","name","startPosition","deliveryExecutives","updateDeliveryExecutives","dataList","node1","node2","orderGraphData","setOrderGraphData","showGraph","toggleGraph","graphConfig","freezeAllDragEvents","nodeHighlightBehavior","color","highlightStrokeColor","fontSize","link","highlightColor","renderLabel","labelProperty","directed","height","width","orderData","setOrderData","updatePickupLocationOfDeliveryLocation","event","pickupLocation","target","value","updateDropLocationOfDeliveryLocation","dropLocation","submitOrders","item","keys","generateGraphData","distanceToReachForEachExecutive","i","length","selectedIndex","indexOf","Math","min","selectedDeliveryExecutive","pickupShortestPath","deliveryShortestPath","deliveryExecutive","deliveryExecutiveStartingLocation","pickup","links","getLinks","nodes","generateNodes","drop","executives","source","map","id","Grid","container","xs","md","className","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","index","scope","deliveryPerson","style","textAlign","InputLabel","Select","onChange","MenuItem","marginTop","Button","variant","onClick","data","config","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.997ef0e5.chunk.js","sourcesContent":["const shortestDistanceNode = (distances, visited) => {\r\n    // create a default value for shortest\r\n    let shortest = null;\r\n  \r\n    // for each node in the distances object\r\n    for (let node in distances) {\r\n      // if no node has been assigned to shortest yet\r\n      // or if the current node's distance is smaller than the current shortest\r\n      let currentIsShortest =\r\n        shortest === null || distances[node] < distances[shortest];\r\n  \r\n      // and if the current node is in the unvisited set\r\n      if (currentIsShortest && !visited.includes(node)) {\r\n        // update shortest to be the current node\r\n        shortest = node;\r\n      }\r\n    }\r\n    return shortest;\r\n  };\r\n  \r\n  const findShortestPath = (graph, startNode, endNode) => {\r\n  \r\n    // track distances from the start node using a hash object\r\n    let distances = {};\r\n    distances[endNode] = \"Infinity\";\r\n    distances = Object.assign(distances, graph[startNode]);\r\n  \r\n    // track paths using a hash object\r\n    let parents = { endNode: null };\r\n    for (let child in graph[startNode]) {\r\n      parents[child] = startNode;\r\n    }\r\n  \r\n    // collect visited nodes\r\n    let visited = [];\r\n    // find the nearest node\r\n    let node = shortestDistanceNode(distances, visited);\r\n  \r\n    // for that node:\r\n    while (node) {\r\n      // find its distance from the start node & its child nodes\r\n      let distance = distances[node];\r\n      let children = graph[node];\r\n  \r\n      // for each of those child nodes:\r\n      for (let child in children) {\r\n  \r\n        // make sure each child node is not the start node\r\n        if (String(child) === String(startNode)) {\r\n          continue;\r\n        } else {\r\n          // save the distance from the start node to the child node\r\n          let newdistance = distance + children[child];\r\n          // if there's no recorded distance from the start node to the child node in the distances object\r\n          // or if the recorded distance is shorter than the previously stored distance from the start node to the child node\r\n          if (!distances[child] || distances[child] > newdistance) {\r\n            // save the distance to the object\r\n            distances[child] = newdistance;\r\n            // record the path\r\n            parents[child] = node;\r\n          }\r\n        }\r\n      }\r\n      // move the current node to the visited set\r\n      visited.push(node);\r\n      // move to the nearest neighbor node\r\n      node = shortestDistanceNode(distances, visited);\r\n    }\r\n  \r\n    // using the stored paths from start node to end node\r\n    // record the shortest path\r\n    let shortestPath = [endNode];\r\n    let parent = parents[endNode];\r\n    while (parent) {\r\n      shortestPath.push(parent);\r\n      parent = parents[parent];\r\n    }\r\n    shortestPath.reverse();\r\n  \r\n    //this is the shortest path\r\n    let results = {\r\n      distance: distances[endNode],\r\n      path: shortestPath,\r\n    };\r\n    // return the shortest path & the end node's distance from the start node\r\n    return results;\r\n  };\r\n  \r\n  export default findShortestPath;","import React, { useState, } from 'react'\r\nimport {\r\n  Button,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  TableCell,\r\n  TableContainer,\r\n  Paper,\r\n  Table,\r\n  TableHead,\r\n  TableRow,\r\n  TableBody,\r\n  Grid,\r\n} from '@material-ui/core'\r\nimport { Graph } from 'react-d3-graph'\r\nimport findShortestPath from '../utils/shortestPath'\r\n\r\nconst Home = () => {\r\n  const restaurants = [\"R1\", \"R2\", \"R3\"]\r\n  const houses = [\"H1\", \"H2\", \"H3\", \"H4\", \"H5\"]\r\n  const [deliveryExecutives, updateDeliveryExecutives] = useState([\r\n    {\r\n      name: \"D1\",\r\n      startPosition: \"H1\",\r\n    },\r\n    {\r\n      name: \"D2\",\r\n      startPosition: \"H3\",\r\n    }\r\n  ])\r\n\r\n  const dataList = [\r\n    {\r\n      node1: \"R1\",\r\n      node2: \"H3\",\r\n      distance: 3,\r\n    },\r\n    {\r\n      node1: \"R1\",\r\n      node2: \"H5\",\r\n      distance: 7,\r\n    },\r\n    {\r\n      node1: \"R2\",\r\n      node2: \"H1\",\r\n      distance: 5,\r\n    },\r\n    {\r\n      node1: \"R2\",\r\n      node2: \"H3\",\r\n      distance: 6,\r\n    },\r\n    {\r\n      node1: \"R2\",\r\n      node2: \"H4\",\r\n      distance: 10,\r\n    },\r\n    {\r\n      node1: \"R3\",\r\n      node2: \"H2\",\r\n      distance: 8,\r\n    },\r\n    {\r\n      node1: \"R3\",\r\n      node2: \"H3\",\r\n      distance: 6,\r\n    },\r\n  ]\r\n\r\n  const [orderGraphData, setOrderGraphData] = useState({})\r\n  const [showGraph, toggleGraph] = useState(false)\r\n  const graphConfig = {\r\n    freezeAllDragEvents: true,\r\n    nodeHighlightBehavior: true,\r\n    node: {\r\n      color: \"lightgreen\",\r\n      highlightStrokeColor: \"blue\",\r\n      fontSize: 16,\r\n    },\r\n    link: {\r\n      highlightColor: \"lightblue\",\r\n      renderLabel: true,\r\n      labelProperty: \"distance\",\r\n      fontSize: 12,\r\n    },\r\n    directed: true,\r\n    height: 300,\r\n    width: 300,\r\n  };\r\n\r\n  const generateGraphData = () => {\r\n    let graph = {};\r\n\r\n    for (let item of dataList) {\r\n      graph[item.node1] = Object.keys(graph).includes(item.node1)\r\n        ? { ...graph[item.node1], [item.node2]: item.distance }\r\n        : { [item.node2]: item.distance }\r\n      graph[item.node2] = Object.keys(graph).includes(item.node2)\r\n        ? { ...graph[item.node2], [item.node1]: item.distance }\r\n        : { [item.node1]: item.distance }\r\n    }\r\n    return graph;\r\n  }\r\n\r\n  const [orderData, setOrderData] = useState({})\r\n\r\n  const updatePickupLocationOfDeliveryLocation = event => {\r\n    setOrderData({ ...orderData, pickupLocation: event.target.value })\r\n  }\r\n\r\n  const updateDropLocationOfDeliveryLocation = event => {\r\n    setOrderData({ ...orderData, dropLocation: event.target.value })\r\n  }\r\n\r\n  const finalForm = () => {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <div>\r\n            <h4>Orders</h4>\r\n            <h5>Live Location</h5>\r\n            <div>\r\n              {deliveryExecutives.map(deliveryPerson => (\r\n                <div key={deliveryPerson.name}>\r\n                  Delivery Executive {deliveryPerson.name} is at Location {deliveryPerson.startPosition}\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <div style={{ textAlign: \"left\" }}>\r\n              <p>Steps to proceed :-</p>\r\n              <ol>\r\n                <li>Select the Pickup Location</li>\r\n                <li>Select the Drop Location</li>\r\n              </ol>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <TableContainer component={Paper} className=\"table\">\r\n          <Table aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>\r\n                  <InputLabel>Select Pickup location</InputLabel>\r\n                  <Select onChange={updatePickupLocationOfDeliveryLocation}>\r\n                    {restaurants.map(item => <MenuItem key={item} value={item}>{item}</MenuItem>)}\r\n                  </Select>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <InputLabel>Select Delivery Location</InputLabel>\r\n                  <Select onChange={updateDropLocationOfDeliveryLocation}>\r\n                    {houses.map(item => <MenuItem key={item} value={item}>{item}</MenuItem>)}\r\n                  </Select>\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n          </Table>\r\n        </TableContainer>\r\n\r\n        <Grid container style={{ marginTop: \"40px\" }}>\r\n          <Grid xs={12}>\r\n            <Button variant=\"contained\" color=\"primary\" onClick={submitOrders}>Submit</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const submitOrders = () => {\r\n    toggleGraph(false)\r\n    const graph = generateGraphData();\r\n    const distanceToReachForEachExecutive = []\r\n    for (let i = 0; i < deliveryExecutives.length; i++) {\r\n      const shortestPath = findShortestPath(graph, deliveryExecutives[i].startPosition, orderData.pickupLocation)\r\n      distanceToReachForEachExecutive.push(shortestPath.distance);\r\n    }\r\n\r\n    const selectedIndex = distanceToReachForEachExecutive.indexOf(Math.min(...distanceToReachForEachExecutive));\r\n    const selectedDeliveryExecutive = deliveryExecutives[selectedIndex];\r\n\r\n    const pickupShortestPath = findShortestPath(graph, selectedDeliveryExecutive.startPosition, orderData.pickupLocation)\r\n    const deliveryShortestPath = findShortestPath(graph, orderData.pickupLocation, orderData.dropLocation)\r\n\r\n    setOrderGraphData({\r\n      deliveryExecutive: selectedDeliveryExecutive.name,\r\n      deliveryExecutiveStartingLocation: selectedDeliveryExecutive.startPosition,\r\n      pickup: {\r\n        links: getLinks(graph, pickupShortestPath.path),\r\n        nodes: generateNodes(pickupShortestPath.path),\r\n      },\r\n      drop: {\r\n        links: getLinks(graph, deliveryShortestPath.path),\r\n        nodes: generateNodes(deliveryShortestPath.path)\r\n      },\r\n    })\r\n    toggleGraph(true)\r\n\r\n    const executives = [...deliveryExecutives]\r\n    executives[selectedIndex].startPosition = orderData.dropLocation\r\n    updateDeliveryExecutives(executives)\r\n  }\r\n\r\n  const getLinks = (graph, path) => {\r\n    const links = []\r\n    for (let i = 1; i < path.length; i++) {\r\n      let graphNode = graph[path[i - 1]];\r\n      let distance = graphNode[path[i]]\r\n      links.push({ source: path[i - 1], target: path[i], distance })\r\n    }\r\n    return links;\r\n  }\r\n\r\n  const generateNodes = (path) => path.map(item => ({ id: item }))\r\n\r\n\r\n  const getDataTable = () => {\r\n    return (\r\n      <TableContainer component={Paper} className=\"table\">\r\n        <Table aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell align=\"center\">Restaurants</TableCell>\r\n              <TableCell align=\"center\">Houses</TableCell>\r\n              <TableCell align=\"center\">Distance</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n\r\n            {dataList.map((item, index) => (\r\n              <TableRow key={index}>\r\n                <TableCell component=\"th\" align=\"center\" scope=\"row\">\r\n                  {item.node1}\r\n                </TableCell>\r\n                <TableCell align=\"center\">{item.node2}</TableCell>\r\n                <TableCell align=\"center\">{item.distance}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <>\r\n        <Grid container>\r\n          <Grid xs={12}>\r\n            <h3>Live Ordering System</h3>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container>\r\n          <Grid item xs={12} md={6}>\r\n\r\n            <div className=\"form\">\r\n              {getDataTable()}\r\n            </div>\r\n          </Grid>\r\n          <Grid item xs={12} md={6}>\r\n            {finalForm()}\r\n          </Grid>\r\n\r\n          {showGraph ? (\r\n            <Grid item xs={12}>\r\n              <Grid container>\r\n                <Grid item xs={6} md={6}>\r\n                  <div>\r\n                    <div>\r\n                      {orderGraphData.deliveryExecutive} will go from {orderGraphData.deliveryExecutiveStartingLocation} to {orderData.pickupLocation} for Pickup\r\n                    </div>\r\n                    <Graph\r\n                      id=\"graph-id-pickup\" // id is mandatory\r\n                      data={orderGraphData.pickup}\r\n                      config={graphConfig}\r\n                    />\r\n                  </div>\r\n                </Grid>\r\n                <Grid item xs={6} md={6}>\r\n                  <div>\r\n                    <div>\r\n                      {orderGraphData.deliveryExecutive} will go from {orderData.pickupLocation} to {orderData.dropLocation} for Delivery\r\n                    </div>\r\n                    <Graph\r\n                      id=\"graph-id-drop\" // id is mandatory\r\n                      data={orderGraphData.drop}\r\n                      config={graphConfig}\r\n                    />\r\n                  </div>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          ) : null}\r\n        </Grid>\r\n      </>\r\n\r\n    </div >\r\n  )\r\n}\r\n\r\nexport default Home","import React from 'react'\nimport './App.css';\nimport Home from './Component/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n      {/* <Demo /> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}